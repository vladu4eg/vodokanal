//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Этот исходный текст был создан автоматически: Microsoft.VSDesigner, версия: 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace M2MSOAPSample.M2MSoapService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MTS Communicator M2M XML APISoap", Namespace="http://mcommunicator.ru/M2M")]
    public partial class MTSCommunicatorM2MXMLAPI : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageAtDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageWithValidityPeriodOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageToMultipleSubscribersOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageToMultipleSubscribersAtDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessagesAtDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessagesWithValidityPeriodOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessagesAtDateWithValidityPeriodOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendVariousMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendViberMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessagesStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetViberMessagesStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatisticsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateMailingListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMailingListsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMailingListsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMailingListContactsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetMailingListContactsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateMailingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompanyModeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBalanceOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MTSCommunicatorM2MXMLAPI() {
            this.Url = global::M2MSOAPSample.Properties.Settings.Default.M2MSOAPSample_M2MSoapService_MTS_x0020_Communicator_x0020_M2M_x0020_XML_x0020_API;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SendMessageCompletedEventHandler SendMessageCompleted;
        
        /// <remarks/>
        public event SendMessageAtDateCompletedEventHandler SendMessageAtDateCompleted;
        
        /// <remarks/>
        public event SendMessageWithValidityPeriodCompletedEventHandler SendMessageWithValidityPeriodCompleted;
        
        /// <remarks/>
        public event SendMessageToMultipleSubscribersCompletedEventHandler SendMessageToMultipleSubscribersCompleted;
        
        /// <remarks/>
        public event SendMessageToMultipleSubscribersAtDateCompletedEventHandler SendMessageToMultipleSubscribersAtDateCompleted;
        
        /// <remarks/>
        public event SendMessagesCompletedEventHandler SendMessagesCompleted;
        
        /// <remarks/>
        public event SendMessagesAtDateCompletedEventHandler SendMessagesAtDateCompleted;
        
        /// <remarks/>
        public event SendMessagesWithValidityPeriodCompletedEventHandler SendMessagesWithValidityPeriodCompleted;
        
        /// <remarks/>
        public event SendMessagesAtDateWithValidityPeriodCompletedEventHandler SendMessagesAtDateWithValidityPeriodCompleted;
        
        /// <remarks/>
        public event SendVariousMessagesCompletedEventHandler SendVariousMessagesCompleted;
        
        /// <remarks/>
        public event SendViberMessagesCompletedEventHandler SendViberMessagesCompleted;
        
        /// <remarks/>
        public event GetMessageStatusCompletedEventHandler GetMessageStatusCompleted;
        
        /// <remarks/>
        public event GetMessagesStatusCompletedEventHandler GetMessagesStatusCompleted;
        
        /// <remarks/>
        public event GetViberMessagesStatusCompletedEventHandler GetViberMessagesStatusCompleted;
        
        /// <remarks/>
        public event GetMessagesCompletedEventHandler GetMessagesCompleted;
        
        /// <remarks/>
        public event GetStatisticsCompletedEventHandler GetStatisticsCompleted;
        
        /// <remarks/>
        public event CreateMailingListCompletedEventHandler CreateMailingListCompleted;
        
        /// <remarks/>
        public event GetMailingListsCompletedEventHandler GetMailingListsCompleted;
        
        /// <remarks/>
        public event DeleteMailingListsCompletedEventHandler DeleteMailingListsCompleted;
        
        /// <remarks/>
        public event GetMailingListContactsCompletedEventHandler GetMailingListContactsCompleted;
        
        /// <remarks/>
        public event SetMailingListContactsCompletedEventHandler SetMailingListContactsCompleted;
        
        /// <remarks/>
        public event AddUserCompletedEventHandler AddUserCompleted;
        
        /// <remarks/>
        public event GetGroupsCompletedEventHandler GetGroupsCompleted;
        
        /// <remarks/>
        public event GetUsersCompletedEventHandler GetUsersCompleted;
        
        /// <remarks/>
        public event DeleteUserCompletedEventHandler DeleteUserCompleted;
        
        /// <remarks/>
        public event CreateMailingCompletedEventHandler CreateMailingCompleted;
        
        /// <remarks/>
        public event GetCompanyModeCompletedEventHandler GetCompanyModeCompleted;
        
        /// <remarks/>
        public event GetBalanceCompletedEventHandler GetBalanceCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/SendMessage", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendMessage(string msid, string message, string naming, string login, string password) {
            try
            {
                object[] results = this.Invoke("SendMessage", new object[] {
                        msid,
                        message,
                        naming,
                        login,
                        password});
                return ((string)(results[0]));
            }
            catch(Exception ex)
            {
                return "Error: " + msid + " " + ex.Message ;
            }
        }
        
        /// <remarks/>
        public void SendMessageAsync(string msid, string message, string naming, string login, string password) {
            this.SendMessageAsync(msid, message, naming, login, password, null);
        }
        
        /// <remarks/>
        public void SendMessageAsync(string msid, string message, string naming, string login, string password, object userState) {
            if ((this.SendMessageOperationCompleted == null)) {
                this.SendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageOperationCompleted);
            }
            this.InvokeAsync("SendMessage", new object[] {
                        msid,
                        message,
                        naming,
                        login,
                        password}, this.SendMessageOperationCompleted, userState);
        }
        
        private void OnSendMessageOperationCompleted(object arg) {
            if ((this.SendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageCompleted(this, new SendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/SendMessageAtDate", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long SendMessageAtDate(string msid, string message, string naming, System.DateTime scheduledSendDate, string login, string password) {
            object[] results = this.Invoke("SendMessageAtDate", new object[] {
                        msid,
                        message,
                        naming,
                        scheduledSendDate,
                        login,
                        password});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageAtDateAsync(string msid, string message, string naming, System.DateTime scheduledSendDate, string login, string password) {
            this.SendMessageAtDateAsync(msid, message, naming, scheduledSendDate, login, password, null);
        }
        
        /// <remarks/>
        public void SendMessageAtDateAsync(string msid, string message, string naming, System.DateTime scheduledSendDate, string login, string password, object userState) {
            if ((this.SendMessageAtDateOperationCompleted == null)) {
                this.SendMessageAtDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageAtDateOperationCompleted);
            }
            this.InvokeAsync("SendMessageAtDate", new object[] {
                        msid,
                        message,
                        naming,
                        scheduledSendDate,
                        login,
                        password}, this.SendMessageAtDateOperationCompleted, userState);
        }
        
        private void OnSendMessageAtDateOperationCompleted(object arg) {
            if ((this.SendMessageAtDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageAtDateCompleted(this, new SendMessageAtDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/SendMessageWithValidityPeriod", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long SendMessageWithValidityPeriod(string msid, string message, string naming, string validityPeriod, string login, string password) {
            object[] results = this.Invoke("SendMessageWithValidityPeriod", new object[] {
                        msid,
                        message,
                        naming,
                        validityPeriod,
                        login,
                        password});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageWithValidityPeriodAsync(string msid, string message, string naming, string validityPeriod, string login, string password) {
            this.SendMessageWithValidityPeriodAsync(msid, message, naming, validityPeriod, login, password, null);
        }
        
        /// <remarks/>
        public void SendMessageWithValidityPeriodAsync(string msid, string message, string naming, string validityPeriod, string login, string password, object userState) {
            if ((this.SendMessageWithValidityPeriodOperationCompleted == null)) {
                this.SendMessageWithValidityPeriodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageWithValidityPeriodOperationCompleted);
            }
            this.InvokeAsync("SendMessageWithValidityPeriod", new object[] {
                        msid,
                        message,
                        naming,
                        validityPeriod,
                        login,
                        password}, this.SendMessageWithValidityPeriodOperationCompleted, userState);
        }
        
        private void OnSendMessageWithValidityPeriodOperationCompleted(object arg) {
            if ((this.SendMessageWithValidityPeriodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageWithValidityPeriodCompleted(this, new SendMessageWithValidityPeriodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/SendMessageToMultipleSubscribers", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SendMessageIDs[] SendMessageToMultipleSubscribers(string[] msids, string message, string naming, string login, string password) {
            object[] results = this.Invoke("SendMessageToMultipleSubscribers", new object[] {
                        msids,
                        message,
                        naming,
                        login,
                        password});
            return ((SendMessageIDs[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageToMultipleSubscribersAsync(string[] msids, string message, string naming, string login, string password) {
            this.SendMessageToMultipleSubscribersAsync(msids, message, naming, login, password, null);
        }
        
        /// <remarks/>
        public void SendMessageToMultipleSubscribersAsync(string[] msids, string message, string naming, string login, string password, object userState) {
            if ((this.SendMessageToMultipleSubscribersOperationCompleted == null)) {
                this.SendMessageToMultipleSubscribersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageToMultipleSubscribersOperationCompleted);
            }
            this.InvokeAsync("SendMessageToMultipleSubscribers", new object[] {
                        msids,
                        message,
                        naming,
                        login,
                        password}, this.SendMessageToMultipleSubscribersOperationCompleted, userState);
        }
        
        private void OnSendMessageToMultipleSubscribersOperationCompleted(object arg) {
            if ((this.SendMessageToMultipleSubscribersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageToMultipleSubscribersCompleted(this, new SendMessageToMultipleSubscribersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/SendMessageToMultipleSubscribersAtDate", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SendMessageIDs[] SendMessageToMultipleSubscribersAtDate(string[] msids, string message, string naming, System.DateTime scheduledSendDate, string login, string password) {
            object[] results = this.Invoke("SendMessageToMultipleSubscribersAtDate", new object[] {
                        msids,
                        message,
                        naming,
                        scheduledSendDate,
                        login,
                        password});
            return ((SendMessageIDs[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageToMultipleSubscribersAtDateAsync(string[] msids, string message, string naming, System.DateTime scheduledSendDate, string login, string password) {
            this.SendMessageToMultipleSubscribersAtDateAsync(msids, message, naming, scheduledSendDate, login, password, null);
        }
        
        /// <remarks/>
        public void SendMessageToMultipleSubscribersAtDateAsync(string[] msids, string message, string naming, System.DateTime scheduledSendDate, string login, string password, object userState) {
            if ((this.SendMessageToMultipleSubscribersAtDateOperationCompleted == null)) {
                this.SendMessageToMultipleSubscribersAtDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageToMultipleSubscribersAtDateOperationCompleted);
            }
            this.InvokeAsync("SendMessageToMultipleSubscribersAtDate", new object[] {
                        msids,
                        message,
                        naming,
                        scheduledSendDate,
                        login,
                        password}, this.SendMessageToMultipleSubscribersAtDateOperationCompleted, userState);
        }
        
        private void OnSendMessageToMultipleSubscribersAtDateOperationCompleted(object arg) {
            if ((this.SendMessageToMultipleSubscribersAtDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageToMultipleSubscribersAtDateCompleted(this, new SendMessageToMultipleSubscribersAtDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/SendMessages", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SendMessageIDs[] SendMessages(string[] msids, string message, string naming, string login, string password) {
            object[] results = this.Invoke("SendMessages", new object[] {
                        msids,
                        message,
                        naming,
                        login,
                        password});
            return ((SendMessageIDs[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessagesAsync(string[] msids, string message, string naming, string login, string password) {
            this.SendMessagesAsync(msids, message, naming, login, password, null);
        }
        
        /// <remarks/>
        public void SendMessagesAsync(string[] msids, string message, string naming, string login, string password, object userState) {
            if ((this.SendMessagesOperationCompleted == null)) {
                this.SendMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessagesOperationCompleted);
            }
            this.InvokeAsync("SendMessages", new object[] {
                        msids,
                        message,
                        naming,
                        login,
                        password}, this.SendMessagesOperationCompleted, userState);
        }
        
        private void OnSendMessagesOperationCompleted(object arg) {
            if ((this.SendMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessagesCompleted(this, new SendMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/SendMessagesAtDate", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SendMessageIDs[] SendMessagesAtDate(string[] msids, string message, string naming, System.DateTime scheduledSendDate, string login, string password) {
            object[] results = this.Invoke("SendMessagesAtDate", new object[] {
                        msids,
                        message,
                        naming,
                        scheduledSendDate,
                        login,
                        password});
            return ((SendMessageIDs[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessagesAtDateAsync(string[] msids, string message, string naming, System.DateTime scheduledSendDate, string login, string password) {
            this.SendMessagesAtDateAsync(msids, message, naming, scheduledSendDate, login, password, null);
        }
        
        /// <remarks/>
        public void SendMessagesAtDateAsync(string[] msids, string message, string naming, System.DateTime scheduledSendDate, string login, string password, object userState) {
            if ((this.SendMessagesAtDateOperationCompleted == null)) {
                this.SendMessagesAtDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessagesAtDateOperationCompleted);
            }
            this.InvokeAsync("SendMessagesAtDate", new object[] {
                        msids,
                        message,
                        naming,
                        scheduledSendDate,
                        login,
                        password}, this.SendMessagesAtDateOperationCompleted, userState);
        }
        
        private void OnSendMessagesAtDateOperationCompleted(object arg) {
            if ((this.SendMessagesAtDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessagesAtDateCompleted(this, new SendMessagesAtDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/SendMessagesWithValidityPeriod", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SendMessageIDs[] SendMessagesWithValidityPeriod(string[] msids, string message, string naming, string login, string validityPeriod, string password) {
            object[] results = this.Invoke("SendMessagesWithValidityPeriod", new object[] {
                        msids,
                        message,
                        naming,
                        login,
                        validityPeriod,
                        password});
            return ((SendMessageIDs[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessagesWithValidityPeriodAsync(string[] msids, string message, string naming, string login, string validityPeriod, string password) {
            this.SendMessagesWithValidityPeriodAsync(msids, message, naming, login, validityPeriod, password, null);
        }
        
        /// <remarks/>
        public void SendMessagesWithValidityPeriodAsync(string[] msids, string message, string naming, string login, string validityPeriod, string password, object userState) {
            if ((this.SendMessagesWithValidityPeriodOperationCompleted == null)) {
                this.SendMessagesWithValidityPeriodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessagesWithValidityPeriodOperationCompleted);
            }
            this.InvokeAsync("SendMessagesWithValidityPeriod", new object[] {
                        msids,
                        message,
                        naming,
                        login,
                        validityPeriod,
                        password}, this.SendMessagesWithValidityPeriodOperationCompleted, userState);
        }
        
        private void OnSendMessagesWithValidityPeriodOperationCompleted(object arg) {
            if ((this.SendMessagesWithValidityPeriodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessagesWithValidityPeriodCompleted(this, new SendMessagesWithValidityPeriodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/SendMessagesAtDateWithValidityPeriod", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SendMessageIDs[] SendMessagesAtDateWithValidityPeriod(string[] msids, string message, string naming, System.DateTime scheduledSendDate, string validityPeriod, string login, string password) {
            object[] results = this.Invoke("SendMessagesAtDateWithValidityPeriod", new object[] {
                        msids,
                        message,
                        naming,
                        scheduledSendDate,
                        validityPeriod,
                        login,
                        password});
            return ((SendMessageIDs[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessagesAtDateWithValidityPeriodAsync(string[] msids, string message, string naming, System.DateTime scheduledSendDate, string validityPeriod, string login, string password) {
            this.SendMessagesAtDateWithValidityPeriodAsync(msids, message, naming, scheduledSendDate, validityPeriod, login, password, null);
        }
        
        /// <remarks/>
        public void SendMessagesAtDateWithValidityPeriodAsync(string[] msids, string message, string naming, System.DateTime scheduledSendDate, string validityPeriod, string login, string password, object userState) {
            if ((this.SendMessagesAtDateWithValidityPeriodOperationCompleted == null)) {
                this.SendMessagesAtDateWithValidityPeriodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessagesAtDateWithValidityPeriodOperationCompleted);
            }
            this.InvokeAsync("SendMessagesAtDateWithValidityPeriod", new object[] {
                        msids,
                        message,
                        naming,
                        scheduledSendDate,
                        validityPeriod,
                        login,
                        password}, this.SendMessagesAtDateWithValidityPeriodOperationCompleted, userState);
        }
        
        private void OnSendMessagesAtDateWithValidityPeriodOperationCompleted(object arg) {
            if ((this.SendMessagesAtDateWithValidityPeriodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessagesAtDateWithValidityPeriodCompleted(this, new SendMessagesAtDateWithValidityPeriodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/SendVariousMessages", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SendMessageIDs[] SendVariousMessages(Submit[] msidsAndMessages, string naming, string scheduledSendDate, string validityPeriod, string login, string password) {
            object[] results = this.Invoke("SendVariousMessages", new object[] {
                        msidsAndMessages,
                        naming,
                        scheduledSendDate,
                        validityPeriod,
                        login,
                        password});
            return ((SendMessageIDs[])(results[0]));
        }
        
        /// <remarks/>
        public void SendVariousMessagesAsync(Submit[] msidsAndMessages, string naming, string scheduledSendDate, string validityPeriod, string login, string password) {
            this.SendVariousMessagesAsync(msidsAndMessages, naming, scheduledSendDate, validityPeriod, login, password, null);
        }
        
        /// <remarks/>
        public void SendVariousMessagesAsync(Submit[] msidsAndMessages, string naming, string scheduledSendDate, string validityPeriod, string login, string password, object userState) {
            if ((this.SendVariousMessagesOperationCompleted == null)) {
                this.SendVariousMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendVariousMessagesOperationCompleted);
            }
            this.InvokeAsync("SendVariousMessages", new object[] {
                        msidsAndMessages,
                        naming,
                        scheduledSendDate,
                        validityPeriod,
                        login,
                        password}, this.SendVariousMessagesOperationCompleted, userState);
        }
        
        private void OnSendVariousMessagesOperationCompleted(object arg) {
            if ((this.SendVariousMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendVariousMessagesCompleted(this, new SendVariousMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/SendViberMessages", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SendMessageIDs[] SendViberMessages(Submit[] msidsAndMessages, string naming, string scheduledSendDate, string validityPeriod, string login, string password) {
            object[] results = this.Invoke("SendViberMessages", new object[] {
                        msidsAndMessages,
                        naming,
                        scheduledSendDate,
                        validityPeriod,
                        login,
                        password});
            return ((SendMessageIDs[])(results[0]));
        }
        
        /// <remarks/>
        public void SendViberMessagesAsync(Submit[] msidsAndMessages, string naming, string scheduledSendDate, string validityPeriod, string login, string password) {
            this.SendViberMessagesAsync(msidsAndMessages, naming, scheduledSendDate, validityPeriod, login, password, null);
        }
        
        /// <remarks/>
        public void SendViberMessagesAsync(Submit[] msidsAndMessages, string naming, string scheduledSendDate, string validityPeriod, string login, string password, object userState) {
            if ((this.SendViberMessagesOperationCompleted == null)) {
                this.SendViberMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendViberMessagesOperationCompleted);
            }
            this.InvokeAsync("SendViberMessages", new object[] {
                        msidsAndMessages,
                        naming,
                        scheduledSendDate,
                        validityPeriod,
                        login,
                        password}, this.SendViberMessagesOperationCompleted, userState);
        }
        
        private void OnSendViberMessagesOperationCompleted(object arg) {
            if ((this.SendViberMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendViberMessagesCompleted(this, new SendViberMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/GetMessageStatus", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DeliveryInfo[] GetMessageStatus(long messageID, string login, string password) {
            object[] results = this.Invoke("GetMessageStatus", new object[] {
                        messageID,
                        login,
                        password});
            return ((DeliveryInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageStatusAsync(long messageID, string login, string password) {
            this.GetMessageStatusAsync(messageID, login, password, null);
        }
        
        /// <remarks/>
        public void GetMessageStatusAsync(long messageID, string login, string password, object userState) {
            if ((this.GetMessageStatusOperationCompleted == null)) {
                this.GetMessageStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageStatusOperationCompleted);
            }
            this.InvokeAsync("GetMessageStatus", new object[] {
                        messageID,
                        login,
                        password}, this.GetMessageStatusOperationCompleted, userState);
        }
        
        private void OnGetMessageStatusOperationCompleted(object arg) {
            if ((this.GetMessageStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageStatusCompleted(this, new GetMessageStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/GetMessagesStatus", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MessageStatusWithID[] GetMessagesStatus(long[] messageIDs, string login, string password) {
            object[] results = this.Invoke("GetMessagesStatus", new object[] {
                        messageIDs,
                        login,
                        password});
            return ((MessageStatusWithID[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMessagesStatusAsync(long[] messageIDs, string login, string password) {
            this.GetMessagesStatusAsync(messageIDs, login, password, null);
        }
        
        /// <remarks/>
        public void GetMessagesStatusAsync(long[] messageIDs, string login, string password, object userState) {
            if ((this.GetMessagesStatusOperationCompleted == null)) {
                this.GetMessagesStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessagesStatusOperationCompleted);
            }
            this.InvokeAsync("GetMessagesStatus", new object[] {
                        messageIDs,
                        login,
                        password}, this.GetMessagesStatusOperationCompleted, userState);
        }
        
        private void OnGetMessagesStatusOperationCompleted(object arg) {
            if ((this.GetMessagesStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessagesStatusCompleted(this, new GetMessagesStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/GetViberMessagesStatus", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ViberMessageStatusWithID[] GetViberMessagesStatus(long[] messageIDs, string login, string password) {
            object[] results = this.Invoke("GetViberMessagesStatus", new object[] {
                        messageIDs,
                        login,
                        password});
            return ((ViberMessageStatusWithID[])(results[0]));
        }
        
        /// <remarks/>
        public void GetViberMessagesStatusAsync(long[] messageIDs, string login, string password) {
            this.GetViberMessagesStatusAsync(messageIDs, login, password, null);
        }
        
        /// <remarks/>
        public void GetViberMessagesStatusAsync(long[] messageIDs, string login, string password, object userState) {
            if ((this.GetViberMessagesStatusOperationCompleted == null)) {
                this.GetViberMessagesStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetViberMessagesStatusOperationCompleted);
            }
            this.InvokeAsync("GetViberMessagesStatus", new object[] {
                        messageIDs,
                        login,
                        password}, this.GetViberMessagesStatusOperationCompleted, userState);
        }
        
        private void OnGetViberMessagesStatusOperationCompleted(object arg) {
            if ((this.GetViberMessagesStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetViberMessagesStatusCompleted(this, new GetViberMessagesStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/GetMessages", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MessageInfo[] GetMessages(RequestMessageType messageType, string[] subscriberMsids, System.DateTime DateFrom, System.DateTime DateTo, string login, string password) {
            object[] results = this.Invoke("GetMessages", new object[] {
                        messageType,
                        subscriberMsids,
                        DateFrom,
                        DateTo,
                        login,
                        password});
            return ((MessageInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMessagesAsync(RequestMessageType messageType, string[] subscriberMsids, System.DateTime DateFrom, System.DateTime DateTo, string login, string password) {
            this.GetMessagesAsync(messageType, subscriberMsids, DateFrom, DateTo, login, password, null);
        }
        
        /// <remarks/>
        public void GetMessagesAsync(RequestMessageType messageType, string[] subscriberMsids, System.DateTime DateFrom, System.DateTime DateTo, string login, string password, object userState) {
            if ((this.GetMessagesOperationCompleted == null)) {
                this.GetMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessagesOperationCompleted);
            }
            this.InvokeAsync("GetMessages", new object[] {
                        messageType,
                        subscriberMsids,
                        DateFrom,
                        DateTo,
                        login,
                        password}, this.GetMessagesOperationCompleted, userState);
        }
        
        private void OnGetMessagesOperationCompleted(object arg) {
            if ((this.GetMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessagesCompleted(this, new GetMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/GetStatistics", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StatisticsInfo GetStatistics(string login, string password) {
            object[] results = this.Invoke("GetStatistics", new object[] {
                        login,
                        password});
            return ((StatisticsInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatisticsAsync(string login, string password) {
            this.GetStatisticsAsync(login, password, null);
        }
        
        /// <remarks/>
        public void GetStatisticsAsync(string login, string password, object userState) {
            if ((this.GetStatisticsOperationCompleted == null)) {
                this.GetStatisticsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatisticsOperationCompleted);
            }
            this.InvokeAsync("GetStatistics", new object[] {
                        login,
                        password}, this.GetStatisticsOperationCompleted, userState);
        }
        
        private void OnGetStatisticsOperationCompleted(object arg) {
            if ((this.GetStatisticsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatisticsCompleted(this, new GetStatisticsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/CreateMailingList", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long CreateMailingList(string name, MailingListContact[] contacts, string login, string password) {
            object[] results = this.Invoke("CreateMailingList", new object[] {
                        name,
                        contacts,
                        login,
                        password});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void CreateMailingListAsync(string name, MailingListContact[] contacts, string login, string password) {
            this.CreateMailingListAsync(name, contacts, login, password, null);
        }
        
        /// <remarks/>
        public void CreateMailingListAsync(string name, MailingListContact[] contacts, string login, string password, object userState) {
            if ((this.CreateMailingListOperationCompleted == null)) {
                this.CreateMailingListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateMailingListOperationCompleted);
            }
            this.InvokeAsync("CreateMailingList", new object[] {
                        name,
                        contacts,
                        login,
                        password}, this.CreateMailingListOperationCompleted, userState);
        }
        
        private void OnCreateMailingListOperationCompleted(object arg) {
            if ((this.CreateMailingListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateMailingListCompleted(this, new CreateMailingListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/GetMailingLists", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultMailingList[] GetMailingLists(string login, string password) {
            object[] results = this.Invoke("GetMailingLists", new object[] {
                        login,
                        password});
            return ((ResultMailingList[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMailingListsAsync(string login, string password) {
            this.GetMailingListsAsync(login, password, null);
        }
        
        /// <remarks/>
        public void GetMailingListsAsync(string login, string password, object userState) {
            if ((this.GetMailingListsOperationCompleted == null)) {
                this.GetMailingListsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMailingListsOperationCompleted);
            }
            this.InvokeAsync("GetMailingLists", new object[] {
                        login,
                        password}, this.GetMailingListsOperationCompleted, userState);
        }
        
        private void OnGetMailingListsOperationCompleted(object arg) {
            if ((this.GetMailingListsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMailingListsCompleted(this, new GetMailingListsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/DeleteMailingLists", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteMailingLists(long[] mailingListIDs, string login, string password) {
            this.Invoke("DeleteMailingLists", new object[] {
                        mailingListIDs,
                        login,
                        password});
        }
        
        /// <remarks/>
        public void DeleteMailingListsAsync(long[] mailingListIDs, string login, string password) {
            this.DeleteMailingListsAsync(mailingListIDs, login, password, null);
        }
        
        /// <remarks/>
        public void DeleteMailingListsAsync(long[] mailingListIDs, string login, string password, object userState) {
            if ((this.DeleteMailingListsOperationCompleted == null)) {
                this.DeleteMailingListsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMailingListsOperationCompleted);
            }
            this.InvokeAsync("DeleteMailingLists", new object[] {
                        mailingListIDs,
                        login,
                        password}, this.DeleteMailingListsOperationCompleted, userState);
        }
        
        private void OnDeleteMailingListsOperationCompleted(object arg) {
            if ((this.DeleteMailingListsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMailingListsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/GetMailingListContacts", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MailingListContact[] GetMailingListContacts(long mailingListId, string login, string password) {
            object[] results = this.Invoke("GetMailingListContacts", new object[] {
                        mailingListId,
                        login,
                        password});
            return ((MailingListContact[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMailingListContactsAsync(long mailingListId, string login, string password) {
            this.GetMailingListContactsAsync(mailingListId, login, password, null);
        }
        
        /// <remarks/>
        public void GetMailingListContactsAsync(long mailingListId, string login, string password, object userState) {
            if ((this.GetMailingListContactsOperationCompleted == null)) {
                this.GetMailingListContactsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMailingListContactsOperationCompleted);
            }
            this.InvokeAsync("GetMailingListContacts", new object[] {
                        mailingListId,
                        login,
                        password}, this.GetMailingListContactsOperationCompleted, userState);
        }
        
        private void OnGetMailingListContactsOperationCompleted(object arg) {
            if ((this.GetMailingListContactsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMailingListContactsCompleted(this, new GetMailingListContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/SetMailingListContacts", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetMailingListContacts(long mailingListId, MailingListContact[] contacts, string login, string password) {
            this.Invoke("SetMailingListContacts", new object[] {
                        mailingListId,
                        contacts,
                        login,
                        password});
        }
        
        /// <remarks/>
        public void SetMailingListContactsAsync(long mailingListId, MailingListContact[] contacts, string login, string password) {
            this.SetMailingListContactsAsync(mailingListId, contacts, login, password, null);
        }
        
        /// <remarks/>
        public void SetMailingListContactsAsync(long mailingListId, MailingListContact[] contacts, string login, string password, object userState) {
            if ((this.SetMailingListContactsOperationCompleted == null)) {
                this.SetMailingListContactsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMailingListContactsOperationCompleted);
            }
            this.InvokeAsync("SetMailingListContacts", new object[] {
                        mailingListId,
                        contacts,
                        login,
                        password}, this.SetMailingListContactsOperationCompleted, userState);
        }
        
        private void OnSetMailingListContactsOperationCompleted(object arg) {
            if ((this.SetMailingListContactsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetMailingListContactsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/AddUser", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long AddUser(string login, string password, string userName, string userMSID, string userEmail, bool webAccessEnabled, AccessLevel accessLevel, long userGroupId) {
            object[] results = this.Invoke("AddUser", new object[] {
                        login,
                        password,
                        userName,
                        userMSID,
                        userEmail,
                        webAccessEnabled,
                        accessLevel,
                        userGroupId});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void AddUserAsync(string login, string password, string userName, string userMSID, string userEmail, bool webAccessEnabled, AccessLevel accessLevel, long userGroupId) {
            this.AddUserAsync(login, password, userName, userMSID, userEmail, webAccessEnabled, accessLevel, userGroupId, null);
        }
        
        /// <remarks/>
        public void AddUserAsync(string login, string password, string userName, string userMSID, string userEmail, bool webAccessEnabled, AccessLevel accessLevel, long userGroupId, object userState) {
            if ((this.AddUserOperationCompleted == null)) {
                this.AddUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserOperationCompleted);
            }
            this.InvokeAsync("AddUser", new object[] {
                        login,
                        password,
                        userName,
                        userMSID,
                        userEmail,
                        webAccessEnabled,
                        accessLevel,
                        userGroupId}, this.AddUserOperationCompleted, userState);
        }
        
        private void OnAddUserOperationCompleted(object arg) {
            if ((this.AddUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserCompleted(this, new AddUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/GetGroups", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SubscriberGroupInfo[] GetGroups(string login, string password) {
            object[] results = this.Invoke("GetGroups", new object[] {
                        login,
                        password});
            return ((SubscriberGroupInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetGroupsAsync(string login, string password) {
            this.GetGroupsAsync(login, password, null);
        }
        
        /// <remarks/>
        public void GetGroupsAsync(string login, string password, object userState) {
            if ((this.GetGroupsOperationCompleted == null)) {
                this.GetGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupsOperationCompleted);
            }
            this.InvokeAsync("GetGroups", new object[] {
                        login,
                        password}, this.GetGroupsOperationCompleted, userState);
        }
        
        private void OnGetGroupsOperationCompleted(object arg) {
            if ((this.GetGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGroupsCompleted(this, new GetGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/GetUsers", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserInfo[] GetUsers(string login, string password) {
            object[] results = this.Invoke("GetUsers", new object[] {
                        login,
                        password});
            return ((UserInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUsersAsync(string login, string password) {
            this.GetUsersAsync(login, password, null);
        }
        
        /// <remarks/>
        public void GetUsersAsync(string login, string password, object userState) {
            if ((this.GetUsersOperationCompleted == null)) {
                this.GetUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersOperationCompleted);
            }
            this.InvokeAsync("GetUsers", new object[] {
                        login,
                        password}, this.GetUsersOperationCompleted, userState);
        }
        
        private void OnGetUsersOperationCompleted(object arg) {
            if ((this.GetUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsersCompleted(this, new GetUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/DeleteUser", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteUser(string msid, string login, string password) {
            this.Invoke("DeleteUser", new object[] {
                        msid,
                        login,
                        password});
        }
        
        /// <remarks/>
        public void DeleteUserAsync(string msid, string login, string password) {
            this.DeleteUserAsync(msid, login, password, null);
        }
        
        /// <remarks/>
        public void DeleteUserAsync(string msid, string login, string password, object userState) {
            if ((this.DeleteUserOperationCompleted == null)) {
                this.DeleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserOperationCompleted);
            }
            this.InvokeAsync("DeleteUser", new object[] {
                        msid,
                        login,
                        password}, this.DeleteUserOperationCompleted, userState);
        }
        
        private void OnDeleteUserOperationCompleted(object arg) {
            if ((this.DeleteUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/CreateMailing", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateMailing(string name, long mailingListID, string text, string date, string naming, string login, string password) {
            this.Invoke("CreateMailing", new object[] {
                        name,
                        mailingListID,
                        text,
                        date,
                        naming,
                        login,
                        password});
        }
        
        /// <remarks/>
        public void CreateMailingAsync(string name, long mailingListID, string text, string date, string naming, string login, string password) {
            this.CreateMailingAsync(name, mailingListID, text, date, naming, login, password, null);
        }
        
        /// <remarks/>
        public void CreateMailingAsync(string name, long mailingListID, string text, string date, string naming, string login, string password, object userState) {
            if ((this.CreateMailingOperationCompleted == null)) {
                this.CreateMailingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateMailingOperationCompleted);
            }
            this.InvokeAsync("CreateMailing", new object[] {
                        name,
                        mailingListID,
                        text,
                        date,
                        naming,
                        login,
                        password}, this.CreateMailingOperationCompleted, userState);
        }
        
        private void OnCreateMailingOperationCompleted(object arg) {
            if ((this.CreateMailingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateMailingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/GetCompanyMode", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCompanyMode(string login, string password) {
            object[] results = this.Invoke("GetCompanyMode", new object[] {
                        login,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCompanyModeAsync(string login, string password) {
            this.GetCompanyModeAsync(login, password, null);
        }
        
        /// <remarks/>
        public void GetCompanyModeAsync(string login, string password, object userState) {
            if ((this.GetCompanyModeOperationCompleted == null)) {
                this.GetCompanyModeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompanyModeOperationCompleted);
            }
            this.InvokeAsync("GetCompanyMode", new object[] {
                        login,
                        password}, this.GetCompanyModeOperationCompleted, userState);
        }
        
        private void OnGetCompanyModeOperationCompleted(object arg) {
            if ((this.GetCompanyModeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompanyModeCompleted(this, new GetCompanyModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcommunicator.ru/M2M/GetBalance", RequestNamespace="http://mcommunicator.ru/M2M", ResponseNamespace="http://mcommunicator.ru/M2M", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBalance(string login, string password) {
            object[] results = this.Invoke("GetBalance", new object[] {
                        login,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBalanceAsync(string login, string password) {
            this.GetBalanceAsync(login, password, null);
        }
        
        /// <remarks/>
        public void GetBalanceAsync(string login, string password, object userState) {
            if ((this.GetBalanceOperationCompleted == null)) {
                this.GetBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBalanceOperationCompleted);
            }
            this.InvokeAsync("GetBalance", new object[] {
                        login,
                        password}, this.GetBalanceOperationCompleted, userState);
        }
        
        private void OnGetBalanceOperationCompleted(object arg) {
            if ((this.GetBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBalanceCompleted(this, new GetBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1099.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mcommunicator.ru/M2M")]
    public partial class SendMessageIDs {
        
        private string msidField;
        
        private long messageIDField;
        
        /// <remarks/>
        public string Msid {
            get {
                return this.msidField;
            }
            set {
                this.msidField = value;
            }
        }
        
        /// <remarks/>
        public long MessageID {
            get {
                return this.messageIDField;
            }
            set {
                this.messageIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1099.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mcommunicator.ru/M2M")]
    public partial class UserInfo {
        
        private string nameField;
        
        private string msidField;
        
        private string emailField;
        
        private long groupIDField;
        
        private System.Nullable<bool> webAccessEnabledField;
        
        private System.Nullable<AccessLevel> accessLevelField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Msid {
            get {
                return this.msidField;
            }
            set {
                this.msidField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public long GroupID {
            get {
                return this.groupIDField;
            }
            set {
                this.groupIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> WebAccessEnabled {
            get {
                return this.webAccessEnabledField;
            }
            set {
                this.webAccessEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<AccessLevel> AccessLevel {
            get {
                return this.accessLevelField;
            }
            set {
                this.accessLevelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1099.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mcommunicator.ru/M2M")]
    public enum AccessLevel {
        
        /// <remarks/>
        Administrator,
        
        /// <remarks/>
        Operator,
        
        /// <remarks/>
        BaseUser,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1099.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mcommunicator.ru/M2M")]
    public partial class SubscriberGroupInfo {
        
        private long idField;
        
        private string nameField;
        
        private int colorField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int Color {
            get {
                return this.colorField;
            }
            set {
                this.colorField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1099.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mcommunicator.ru/M2M")]
    public partial class ResultMailingList {
        
        private long idField;
        
        private string nameField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1099.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mcommunicator.ru/M2M")]
    public partial class MailingListAttribute {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1099.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mcommunicator.ru/M2M")]
    public partial class MailingListContact {
        
        private string msidField;
        
        private string nameField;
        
        private MailingListAttribute[] attributesField;
        
        /// <remarks/>
        public string Msid {
            get {
                return this.msidField;
            }
            set {
                this.msidField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public MailingListAttribute[] Attributes {
            get {
                return this.attributesField;
            }
            set {
                this.attributesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1099.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mcommunicator.ru/M2M")]
    public partial class StatisticsInfo {
        
        private int yearField;
        
        private byte monthField;
        
        private int packetSizeField;
        
        private int includedSMSField;
        
        private int extraSMSField;
        
        private int remainderField;
        
        private int externalPacketSizeField;
        
        private int externalIncludedSmsField;
        
        private int externalExtraSmsField;
        
        private int externalReminderField;
        
        private int generalPacketSizeField;
        
        private int generalIncludedSmsField;
        
        private int generalExtraSmsField;
        
        private int generalReminderField;
        
        private int mTSRemainderField;
        
        private int megafonRemainderField;
        
        private int beelineRemainderField;
        
        private int rostelecomRemainderField;
        
        private int tele2RemainderField;
        
        private int motivRemainderField;
        
        private int mtsTransactionalField;
        
        private int megafonTransactionalField;
        
        private int beelineTransactionalField;
        
        private int tele2TransactionalField;
        
        private int mtsServiceField;
        
        private int megafonServiceField;
        
        private int beelineServiceField;
        
        private int tele2ServiceField;
        
        private int totalBilledSmsField;
        
        /// <remarks/>
        public int Year {
            get {
                return this.yearField;
            }
            set {
                this.yearField = value;
            }
        }
        
        /// <remarks/>
        public byte Month {
            get {
                return this.monthField;
            }
            set {
                this.monthField = value;
            }
        }
        
        /// <remarks/>
        public int PacketSize {
            get {
                return this.packetSizeField;
            }
            set {
                this.packetSizeField = value;
            }
        }
        
        /// <remarks/>
        public int IncludedSMS {
            get {
                return this.includedSMSField;
            }
            set {
                this.includedSMSField = value;
            }
        }
        
        /// <remarks/>
        public int ExtraSMS {
            get {
                return this.extraSMSField;
            }
            set {
                this.extraSMSField = value;
            }
        }
        
        /// <remarks/>
        public int Remainder {
            get {
                return this.remainderField;
            }
            set {
                this.remainderField = value;
            }
        }
        
        /// <remarks/>
        public int ExternalPacketSize {
            get {
                return this.externalPacketSizeField;
            }
            set {
                this.externalPacketSizeField = value;
            }
        }
        
        /// <remarks/>
        public int ExternalIncludedSms {
            get {
                return this.externalIncludedSmsField;
            }
            set {
                this.externalIncludedSmsField = value;
            }
        }
        
        /// <remarks/>
        public int ExternalExtraSms {
            get {
                return this.externalExtraSmsField;
            }
            set {
                this.externalExtraSmsField = value;
            }
        }
        
        /// <remarks/>
        public int ExternalReminder {
            get {
                return this.externalReminderField;
            }
            set {
                this.externalReminderField = value;
            }
        }
        
        /// <remarks/>
        public int GeneralPacketSize {
            get {
                return this.generalPacketSizeField;
            }
            set {
                this.generalPacketSizeField = value;
            }
        }
        
        /// <remarks/>
        public int GeneralIncludedSms {
            get {
                return this.generalIncludedSmsField;
            }
            set {
                this.generalIncludedSmsField = value;
            }
        }
        
        /// <remarks/>
        public int GeneralExtraSms {
            get {
                return this.generalExtraSmsField;
            }
            set {
                this.generalExtraSmsField = value;
            }
        }
        
        /// <remarks/>
        public int GeneralReminder {
            get {
                return this.generalReminderField;
            }
            set {
                this.generalReminderField = value;
            }
        }
        
        /// <remarks/>
        public int MTSRemainder {
            get {
                return this.mTSRemainderField;
            }
            set {
                this.mTSRemainderField = value;
            }
        }
        
        /// <remarks/>
        public int MegafonRemainder {
            get {
                return this.megafonRemainderField;
            }
            set {
                this.megafonRemainderField = value;
            }
        }
        
        /// <remarks/>
        public int BeelineRemainder {
            get {
                return this.beelineRemainderField;
            }
            set {
                this.beelineRemainderField = value;
            }
        }
        
        /// <remarks/>
        public int RostelecomRemainder {
            get {
                return this.rostelecomRemainderField;
            }
            set {
                this.rostelecomRemainderField = value;
            }
        }
        
        /// <remarks/>
        public int Tele2Remainder {
            get {
                return this.tele2RemainderField;
            }
            set {
                this.tele2RemainderField = value;
            }
        }
        
        /// <remarks/>
        public int MotivRemainder {
            get {
                return this.motivRemainderField;
            }
            set {
                this.motivRemainderField = value;
            }
        }
        
        /// <remarks/>
        public int MtsTransactional {
            get {
                return this.mtsTransactionalField;
            }
            set {
                this.mtsTransactionalField = value;
            }
        }
        
        /// <remarks/>
        public int MegafonTransactional {
            get {
                return this.megafonTransactionalField;
            }
            set {
                this.megafonTransactionalField = value;
            }
        }
        
        /// <remarks/>
        public int BeelineTransactional {
            get {
                return this.beelineTransactionalField;
            }
            set {
                this.beelineTransactionalField = value;
            }
        }
        
        /// <remarks/>
        public int Tele2Transactional {
            get {
                return this.tele2TransactionalField;
            }
            set {
                this.tele2TransactionalField = value;
            }
        }
        
        /// <remarks/>
        public int MtsService {
            get {
                return this.mtsServiceField;
            }
            set {
                this.mtsServiceField = value;
            }
        }
        
        /// <remarks/>
        public int MegafonService {
            get {
                return this.megafonServiceField;
            }
            set {
                this.megafonServiceField = value;
            }
        }
        
        /// <remarks/>
        public int BeelineService {
            get {
                return this.beelineServiceField;
            }
            set {
                this.beelineServiceField = value;
            }
        }
        
        /// <remarks/>
        public int Tele2Service {
            get {
                return this.tele2ServiceField;
            }
            set {
                this.tele2ServiceField = value;
            }
        }
        
        /// <remarks/>
        public int TotalBilledSms {
            get {
                return this.totalBilledSmsField;
            }
            set {
                this.totalBilledSmsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1099.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mcommunicator.ru/M2M")]
    public partial class DeliveryInfoExt {
        
        private string targetMsidField;
        
        private DeliveryStatus deliveryStatusField;
        
        private System.DateTime deliveryDateField;
        
        private string targetNameField;
        
        private System.Nullable<System.DateTime> userDeliveryDateField;
        
        /// <remarks/>
        public string TargetMsid {
            get {
                return this.targetMsidField;
            }
            set {
                this.targetMsidField = value;
            }
        }
        
        /// <remarks/>
        public DeliveryStatus DeliveryStatus {
            get {
                return this.deliveryStatusField;
            }
            set {
                this.deliveryStatusField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DeliveryDate {
            get {
                return this.deliveryDateField;
            }
            set {
                this.deliveryDateField = value;
            }
        }
        
        /// <remarks/>
        public string TargetName {
            get {
                return this.targetNameField;
            }
            set {
                this.targetNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> UserDeliveryDate {
            get {
                return this.userDeliveryDateField;
            }
            set {
                this.userDeliveryDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1099.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mcommunicator.ru/M2M")]
    public enum DeliveryStatus {
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Sending,
        
        /// <remarks/>
        Sent,
        
        /// <remarks/>
        NotSent,
        
        /// <remarks/>
        Delivered,
        
        /// <remarks/>
        NotDelivered,
        
        /// <remarks/>
        TimedOut,
        
        /// <remarks/>
        Error,
        
        /// <remarks/>
        Cancelled,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1099.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mcommunicator.ru/M2M")]
    public partial class MessageInfo {
        
        private long messageIDField;
        
        private System.DateTime creationDateField;
        
        private string senderMsidField;
        
        private string senderNameField;
        
        private DeliveryInfoExt[] deliveryInfoField;
        
        private MessageType messageTypeField;
        
        private string messageTextField;
        
        /// <remarks/>
        public long MessageID {
            get {
                return this.messageIDField;
            }
            set {
                this.messageIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreationDate {
            get {
                return this.creationDateField;
            }
            set {
                this.creationDateField = value;
            }
        }
        
        /// <remarks/>
        public string SenderMsid {
            get {
                return this.senderMsidField;
            }
            set {
                this.senderMsidField = value;
            }
        }
        
        /// <remarks/>
        public string SenderName {
            get {
                return this.senderNameField;
            }
            set {
                this.senderNameField = value;
            }
        }
        
        /// <remarks/>
        public DeliveryInfoExt[] DeliveryInfo {
            get {
                return this.deliveryInfoField;
            }
            set {
                this.deliveryInfoField = value;
            }
        }
        
        /// <remarks/>
        public MessageType MessageType {
            get {
                return this.messageTypeField;
            }
            set {
                this.messageTypeField = value;
            }
        }
        
        /// <remarks/>
        public string MessageText {
            get {
                return this.messageTextField;
            }
            set {
                this.messageTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1099.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mcommunicator.ru/M2M")]
    public enum MessageType {
        
        /// <remarks/>
        MO,
        
        /// <remarks/>
        MT,
        
        /// <remarks/>
        Mailing,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1099.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mcommunicator.ru/M2M")]
    public partial class ViberMessageStatusWithID {
        
        private long messageIDField;
        
        private ViberDeliveryInfo[] deliveryField;
        
        /// <remarks/>
        public long MessageID {
            get {
                return this.messageIDField;
            }
            set {
                this.messageIDField = value;
            }
        }
        
        /// <remarks/>
        public ViberDeliveryInfo[] Delivery {
            get {
                return this.deliveryField;
            }
            set {
                this.deliveryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1099.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mcommunicator.ru/M2M")]
    public partial class ViberDeliveryInfo : DeliveryInfo {
        
        private string viberStatusField;
        
        /// <remarks/>
        public string ViberStatus {
            get {
                return this.viberStatusField;
            }
            set {
                this.viberStatusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ViberDeliveryInfo))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1099.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mcommunicator.ru/M2M")]
    public partial class DeliveryInfo {
        
        private string msidField;
        
        private DeliveryStatus deliveryStatusField;
        
        private System.DateTime deliveryDateField;
        
        private System.Nullable<System.DateTime> userDeliveryDateField;
        
        private int partCountField;
        
        /// <remarks/>
        public string Msid {
            get {
                return this.msidField;
            }
            set {
                this.msidField = value;
            }
        }
        
        /// <remarks/>
        public DeliveryStatus DeliveryStatus {
            get {
                return this.deliveryStatusField;
            }
            set {
                this.deliveryStatusField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DeliveryDate {
            get {
                return this.deliveryDateField;
            }
            set {
                this.deliveryDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> UserDeliveryDate {
            get {
                return this.userDeliveryDateField;
            }
            set {
                this.userDeliveryDateField = value;
            }
        }
        
        /// <remarks/>
        public int PartCount {
            get {
                return this.partCountField;
            }
            set {
                this.partCountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1099.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mcommunicator.ru/M2M")]
    public partial class MessageStatusWithID {
        
        private long messageIDField;
        
        private DeliveryInfo[] deliveryField;
        
        /// <remarks/>
        public long MessageID {
            get {
                return this.messageIDField;
            }
            set {
                this.messageIDField = value;
            }
        }
        
        /// <remarks/>
        public DeliveryInfo[] Delivery {
            get {
                return this.deliveryField;
            }
            set {
                this.deliveryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1099.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mcommunicator.ru/M2M")]
    public partial class Submit {
        
        private string msidField;
        
        private string messageField;
        
        /// <remarks/>
        public string Msid {
            get {
                return this.msidField;
            }
            set {
                this.msidField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1099.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mcommunicator.ru/M2M")]
    public enum RequestMessageType {
        
        /// <remarks/>
        All,
        
        /// <remarks/>
        MO,
        
        /// <remarks/>
        MT,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void SendMessageCompletedEventHandler(object sender, SendMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void SendMessageAtDateCompletedEventHandler(object sender, SendMessageAtDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageAtDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageAtDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void SendMessageWithValidityPeriodCompletedEventHandler(object sender, SendMessageWithValidityPeriodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageWithValidityPeriodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageWithValidityPeriodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void SendMessageToMultipleSubscribersCompletedEventHandler(object sender, SendMessageToMultipleSubscribersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageToMultipleSubscribersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageToMultipleSubscribersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SendMessageIDs[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SendMessageIDs[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void SendMessageToMultipleSubscribersAtDateCompletedEventHandler(object sender, SendMessageToMultipleSubscribersAtDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageToMultipleSubscribersAtDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageToMultipleSubscribersAtDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SendMessageIDs[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SendMessageIDs[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void SendMessagesCompletedEventHandler(object sender, SendMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SendMessageIDs[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SendMessageIDs[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void SendMessagesAtDateCompletedEventHandler(object sender, SendMessagesAtDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessagesAtDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessagesAtDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SendMessageIDs[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SendMessageIDs[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void SendMessagesWithValidityPeriodCompletedEventHandler(object sender, SendMessagesWithValidityPeriodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessagesWithValidityPeriodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessagesWithValidityPeriodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SendMessageIDs[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SendMessageIDs[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void SendMessagesAtDateWithValidityPeriodCompletedEventHandler(object sender, SendMessagesAtDateWithValidityPeriodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessagesAtDateWithValidityPeriodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessagesAtDateWithValidityPeriodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SendMessageIDs[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SendMessageIDs[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void SendVariousMessagesCompletedEventHandler(object sender, SendVariousMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendVariousMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendVariousMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SendMessageIDs[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SendMessageIDs[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void SendViberMessagesCompletedEventHandler(object sender, SendViberMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendViberMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendViberMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SendMessageIDs[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SendMessageIDs[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void GetMessageStatusCompletedEventHandler(object sender, GetMessageStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DeliveryInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DeliveryInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void GetMessagesStatusCompletedEventHandler(object sender, GetMessagesStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessagesStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessagesStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MessageStatusWithID[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MessageStatusWithID[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void GetViberMessagesStatusCompletedEventHandler(object sender, GetViberMessagesStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetViberMessagesStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetViberMessagesStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ViberMessageStatusWithID[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ViberMessageStatusWithID[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void GetMessagesCompletedEventHandler(object sender, GetMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MessageInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MessageInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void GetStatisticsCompletedEventHandler(object sender, GetStatisticsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatisticsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatisticsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StatisticsInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StatisticsInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void CreateMailingListCompletedEventHandler(object sender, CreateMailingListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateMailingListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateMailingListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void GetMailingListsCompletedEventHandler(object sender, GetMailingListsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMailingListsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMailingListsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultMailingList[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultMailingList[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void DeleteMailingListsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void GetMailingListContactsCompletedEventHandler(object sender, GetMailingListContactsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMailingListContactsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMailingListContactsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MailingListContact[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MailingListContact[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void SetMailingListContactsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void AddUserCompletedEventHandler(object sender, AddUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void GetGroupsCompletedEventHandler(object sender, GetGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SubscriberGroupInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubscriberGroupInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void GetUsersCompletedEventHandler(object sender, GetUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void DeleteUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void CreateMailingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void GetCompanyModeCompletedEventHandler(object sender, GetCompanyModeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompanyModeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompanyModeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void GetBalanceCompletedEventHandler(object sender, GetBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591